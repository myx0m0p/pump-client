/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/web3.js';
import { PUMP_PROGRAM_ADDRESS } from '../programs';

/** NotAuthorized: The given account is not authorized to execute this instruction. */
export const PUMP_ERROR__NOT_AUTHORIZED = 0x1770; // 6000
/** AlreadyInitialized: The program is already initialized. */
export const PUMP_ERROR__ALREADY_INITIALIZED = 0x1771; // 6001
/** TooMuchSolRequired: slippage: Too much SOL required to buy the given amount of tokens. */
export const PUMP_ERROR__TOO_MUCH_SOL_REQUIRED = 0x1772; // 6002
/** TooLittleSolReceived: slippage: Too little SOL received to sell the given amount of tokens. */
export const PUMP_ERROR__TOO_LITTLE_SOL_RECEIVED = 0x1773; // 6003
/** MintDoesNotMatchBondingCurve: The mint does not match the bonding curve. */
export const PUMP_ERROR__MINT_DOES_NOT_MATCH_BONDING_CURVE = 0x1774; // 6004
/** BondingCurveComplete: The bonding curve has completed and liquidity migrated to raydium. */
export const PUMP_ERROR__BONDING_CURVE_COMPLETE = 0x1775; // 6005
/** BondingCurveNotComplete: The bonding curve has not completed. */
export const PUMP_ERROR__BONDING_CURVE_NOT_COMPLETE = 0x1776; // 6006
/** NotInitialized: The program is not initialized. */
export const PUMP_ERROR__NOT_INITIALIZED = 0x1777; // 6007
/** WithdrawTooFrequent: Withdraw too frequent */
export const PUMP_ERROR__WITHDRAW_TOO_FREQUENT = 0x1778; // 6008

export type PumpError =
  | typeof PUMP_ERROR__ALREADY_INITIALIZED
  | typeof PUMP_ERROR__BONDING_CURVE_COMPLETE
  | typeof PUMP_ERROR__BONDING_CURVE_NOT_COMPLETE
  | typeof PUMP_ERROR__MINT_DOES_NOT_MATCH_BONDING_CURVE
  | typeof PUMP_ERROR__NOT_AUTHORIZED
  | typeof PUMP_ERROR__NOT_INITIALIZED
  | typeof PUMP_ERROR__TOO_LITTLE_SOL_RECEIVED
  | typeof PUMP_ERROR__TOO_MUCH_SOL_REQUIRED
  | typeof PUMP_ERROR__WITHDRAW_TOO_FREQUENT;

let pumpErrorMessages: Record<PumpError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  pumpErrorMessages = {
    [PUMP_ERROR__ALREADY_INITIALIZED]: `The program is already initialized.`,
    [PUMP_ERROR__BONDING_CURVE_COMPLETE]: `The bonding curve has completed and liquidity migrated to raydium.`,
    [PUMP_ERROR__BONDING_CURVE_NOT_COMPLETE]: `The bonding curve has not completed.`,
    [PUMP_ERROR__MINT_DOES_NOT_MATCH_BONDING_CURVE]: `The mint does not match the bonding curve.`,
    [PUMP_ERROR__NOT_AUTHORIZED]: `The given account is not authorized to execute this instruction.`,
    [PUMP_ERROR__NOT_INITIALIZED]: `The program is not initialized.`,
    [PUMP_ERROR__TOO_LITTLE_SOL_RECEIVED]: `slippage: Too little SOL received to sell the given amount of tokens.`,
    [PUMP_ERROR__TOO_MUCH_SOL_REQUIRED]: `slippage: Too much SOL required to buy the given amount of tokens.`,
    [PUMP_ERROR__WITHDRAW_TOO_FREQUENT]: `Withdraw too frequent`,
  };
}

export function getPumpErrorMessage(code: PumpError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (pumpErrorMessages as Record<PumpError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isPumpError<TProgramErrorCode extends PumpError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    PUMP_PROGRAM_ADDRESS,
    code
  );
}
