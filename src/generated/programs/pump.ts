/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedBuyInstruction,
  type ParsedCreateInstruction,
  type ParsedSellInstruction,
} from '../instructions';

export const PUMP_PROGRAM_ADDRESS =
  '6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P' as Address<'6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P'>;

export enum PumpAccount {
  Global,
  BondingCurve,
}

export function identifyPumpAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): PumpAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([167, 232, 232, 177, 200, 108, 114, 127])
      ),
      0
    )
  ) {
    return PumpAccount.Global;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([23, 183, 248, 55, 96, 216, 172, 96])
      ),
      0
    )
  ) {
    return PumpAccount.BondingCurve;
  }
  throw new Error(
    'The provided account could not be identified as a pump account.'
  );
}

export enum PumpInstruction {
  Create,
  Buy,
  Sell,
}

export function identifyPumpInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): PumpInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([24, 30, 200, 40, 5, 28, 7, 119])
      ),
      0
    )
  ) {
    return PumpInstruction.Create;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([102, 6, 61, 18, 1, 218, 235, 234])
      ),
      0
    )
  ) {
    return PumpInstruction.Buy;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([51, 230, 133, 164, 1, 127, 131, 173])
      ),
      0
    )
  ) {
    return PumpInstruction.Sell;
  }
  throw new Error(
    'The provided instruction could not be identified as a pump instruction.'
  );
}

export type ParsedPumpInstruction<
  TProgram extends string = '6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P',
> =
  | ({
      instructionType: PumpInstruction.Create;
    } & ParsedCreateInstruction<TProgram>)
  | ({ instructionType: PumpInstruction.Buy } & ParsedBuyInstruction<TProgram>)
  | ({
      instructionType: PumpInstruction.Sell;
    } & ParsedSellInstruction<TProgram>);
